# This file shows some examples of setting defaults to your own tastes.
#
# If you wish to adjust the default ruby interpreter/version/patchlevel
# settings they can be found in the $rvm_path/config/db file.
# Beware that currently that file is overwritten on install so
# back it up if you change anything.
#

# rvm Path
#   This is where rvm installs and manages everything in by default.
export rvm_path="$HOME/.rvm"

# Source Path
#   This is where rvm extracts to for compiling & installing.
export rvm_source_path="${rvm_path}/src"

# Log Path
#   This is where rvm logs all of it's actions to
#   (not including the 'do' actions)
export rvm_log_path="${rvm_path}/log"

# Bin Path
#   This is where rvm places all of it's executable/wrapper scripts.
export rvm_bin_path="${rvm_path}/bin"

# Gem Path
#   This is where rvm installs all gems to for each ruby
#   interpreter/version%gemset
export rvm_gems_path="$rvm_path/gems"

# Gem Options
#   These options are passed to the 'gem' command in a RVM environment.
export rvm_gem_options="--no-rdoc --no-ri"

# Temp Path
#   This is where rvm stores all of its temporary files.
export rvm_tmp_path="${rvm_tmp_path:-"$rvm_path/tmp"}"

# Install On Use Flag
# Install rubies when used if are not installed.
#export rvm_install_on_use_flag=1

# Gemset Creat on use Flag
# This will create a gemset when the gemset is used if it does not exist
export rvm_gemset_create_on_use_flag=1

# Make Flags, I have 8 cpu's so I might use 7 make threads:
#export rvm_make_flags="-j7"

# Source a .rvmrc file in a directory after changing to it, if it exists.
# To disable this fature, set in root/home .rvmrc file:
#
# export rvm_project_rvmrc=0
export rvm_project_rvmrc=1
#
# Or don't even bother sourcing rvm, it *is* optional. Always has been, you can
# instead add $rvm_path/bin to your PATH and use --default to switch...

# Automatically trust project .rvmrc files
export rvm_trust_rvmrcs_flag=1

# Always trust an rvmrc, even if it's contents change.
# CAUTION: Can be dangerous / security risk. Only use this feature if you know
#          what you are doing / accept the implications :)
export rvm_always_trust_rvmrc_flag

# Specify RBXOPT enviroment settings that should always be set when calling
# Rubinius scripts. For example, to always run the agent when running from
# an Rubinius environment, set the value to '-Xagent'
# export rvm_rbx_opt

# Disable automatic system configuration of RVM via /etc/profile.d/rvm.sh:
#
# export rvm_etc_profile_flag=0
#
# Add configure flags for builds
#
# export rvm_configure_flags="--with-readline-dir=$rvm_path/usr"
# export rvm_configure_flags="--with-openssl-dir=$rvm_path/usr --with-readline-dir=$rvm_path/usr"






##################################################################
##
##   Snow Leopard or Lion  with Xcode 4.2
##
# ----------------------------------------------------------------------
#　$ rvm install 1.9.2 -C --with-readline-dir=$HOME/.rvm/usr
#　Installing Ruby from source to: /Users/nao/.rvm/rubies/ruby-1.9.2-p290, this may take a while depending on your cpu(s)...
#　
#　ruby-1.9.2-p290 - #fetching
#　ruby-1.9.2-p290 - #extracted to /Users/nao/.rvm/src/ruby-1.9.2-p290 (already extracted)
#　Fetching yaml-0.1.4.tar.gz to /Users/nao/.rvm/archives
#　Extracting yaml-0.1.4.tar.gz to /Users/nao/.rvm/src
#　Configuring yaml in /Users/nao/.rvm/src/yaml-0.1.4.
#　Compiling yaml in /Users/nao/.rvm/src/yaml-0.1.4.
#　Installing yaml to /Users/nao/.rvm/usr
#　ruby-1.9.2-p290 - #configuring
#　ruby-1.9.2-p290 - #compiling
#　ERROR: Error running 'make ', please read /Users/nao/.rvm/log/ruby-1.9.2-p290/make.log
#　ERROR: There has been an error while running make. Halting the installation.
# ----------------------------------------------------------------------
#
#         ↓
#
#  $ sudo port install apple-gcc42
#  $ export CC=/opt/local/bin/gcc-apple-4.2
#  $ rvm install ruby-1.9.2-p290 -C --with-readline-dir=$HOME/.rvm/usr
#
